---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.14.0
  name: modelproviders.llmaz.io
spec:
  group: llmaz.io
  names:
    kind: ModelProvider
    listKind: ModelProviderList
    plural: modelproviders
    singular: modelprovider
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: ModelProvider is the Schema for the modelProvider API.
        properties:
          apiVersion:
            description: |-
              APIVersion defines the versioned schema of this representation of an object.
              Servers should convert recognized schemas to the latest internal value, and
              may reject unrecognized values.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            type: string
          kind:
            description: |-
              Kind is a string value representing the REST resource this object represents.
              Servers may infer this from the endpoint the client submits requests to.
              Cannot be updated.
              In CamelCase.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            type: string
          metadata:
            type: object
          spec:
            description: ModelProviderSpec defines the desired state of ModelProvider
            properties:
              dataSource:
                description: DataSource represents where to fetch the models, huggingface,
                  hostpath, s3, etc..
                properties:
                  image:
                    description: |-
                      The name of the image that contains the source data. The assumption is that the source data locates in the
                      `data` directory in the image.
                    type: string
                  imagePullSecrets:
                    description: ImagePullSecrets is a list of secret names in the
                      same namespace used for pulling the data image.
                    items:
                      type: string
                    type: array
                  name:
                    description: |-
                      The name of the dataset. The same name will be used as a container name.
                      It must be a valid DNS subdomain value,
                    type: string
                  urls:
                    description: URLs specifies the links to the public data sources.
                      E.g., files in a public github repository.
                    items:
                      type: string
                    type: array
                  volumeSource:
                    description: The mounted volume that contains the data.
                    x-kubernetes-preserve-unknown-fields: true
                type: object
              familyName:
                description: |-
                  FamilyName represents the model type, like llama2, which will be auto injected
                  to the labels with the key of `llmaz.io/model-family-name`.
                type: string
              inferenceFlavors:
                description: |-
                  InferenceFlavors represents the hardware requirements to serve the model.
                  Flavors are fungible following the priority of slice order.
                items:
                  description: |-
                    Flavor represents the hardware requirements for one model.
                    Generally, it will be used in two places:
                    - Pod scheduling with node selectors specified.
                    - Cluster autoscaling with essential parameters provided.
                    Flavor is useful because the hardware requirements for models
                    are usually clear, like llama2-70B needs 8x Nvidia A100.
                  properties:
                    name:
                      description: Name represents the flavor name.
                      type: string
                    nodeSelector:
                      description: |-
                        NodeSelector refers to the nodes with specified accelerators equipped to
                        serve the model, like cloud-provider.com/accelerator: nvidia-a100,
                        NodeSelector will be auto injected to the Pods as scheduling primitives.
                      items:
                        description: |-
                          A node selector represents the union of the results of one or more label queries
                          over a set of nodes; that is, it represents the OR of the selectors represented
                          by the node selector terms.
                        properties:
                          nodeSelectorTerms:
                            description: Required. A list of node selector terms.
                              The terms are ORed.
                            items:
                              description: |-
                                A null or empty node selector term matches no objects. The requirements of
                                them are ANDed.
                                The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
                              properties:
                                matchExpressions:
                                  description: A list of node selector requirements
                                    by node's labels.
                                  items:
                                    description: |-
                                      A node selector requirement is a selector that contains values, a key, and an operator
                                      that relates the key and values.
                                    properties:
                                      key:
                                        description: The label key that the selector
                                          applies to.
                                        type: string
                                      operator:
                                        description: |-
                                          Represents a key's relationship to a set of values.
                                          Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
                                        type: string
                                      values:
                                        description: |-
                                          An array of string values. If the operator is In or NotIn,
                                          the values array must be non-empty. If the operator is Exists or DoesNotExist,
                                          the values array must be empty. If the operator is Gt or Lt, the values
                                          array must have a single element, which will be interpreted as an integer.
                                          This array is replaced during a strategic merge patch.
                                        items:
                                          type: string
                                        type: array
                                    required:
                                    - key
                                    - operator
                                    type: object
                                  type: array
                                matchFields:
                                  description: A list of node selector requirements
                                    by node's fields.
                                  items:
                                    description: |-
                                      A node selector requirement is a selector that contains values, a key, and an operator
                                      that relates the key and values.
                                    properties:
                                      key:
                                        description: The label key that the selector
                                          applies to.
                                        type: string
                                      operator:
                                        description: |-
                                          Represents a key's relationship to a set of values.
                                          Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
                                        type: string
                                      values:
                                        description: |-
                                          An array of string values. If the operator is In or NotIn,
                                          the values array must be non-empty. If the operator is Exists or DoesNotExist,
                                          the values array must be empty. If the operator is Gt or Lt, the values
                                          array must have a single element, which will be interpreted as an integer.
                                          This array is replaced during a strategic merge patch.
                                        items:
                                          type: string
                                        type: array
                                    required:
                                    - key
                                    - operator
                                    type: object
                                  type: array
                              type: object
                              x-kubernetes-map-type: atomic
                            type: array
                        required:
                        - nodeSelectorTerms
                        type: object
                        x-kubernetes-map-type: atomic
                      type: array
                    params:
                      additionalProperties:
                        type: string
                      description: |-
                        Params stores other useful parameters and will be consumed by the autoscaling components
                        like cluster-autoscaler, Karpenter.
                        E.g. when scaling up nodes with 8x Nvidia A00, the parameter can be injected with
                        instance-type: p4d.24xlarge for AWS.
                      type: object
                    requests:
                      additionalProperties:
                        anyOf:
                        - type: integer
                        - type: string
                        pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                        x-kubernetes-int-or-string: true
                      description: |-
                        Requests represents the required resources to serve the model, like nvidia.com/gpu: 8.
                        Note: cpu and memory usage of the model backend (vllm e.g.) can also be declared here,
                        or a default value will be used based on the community recommendations.
                      type: object
                  required:
                  - name
                  - requests
                  type: object
                type: array
            required:
            - dataSource
            - familyName
            type: object
          status:
            description: ModelProviderStatus defines the observed state of ModelProvider
            properties:
              conditions:
                description: Conditions represents the Inference condition.
                items:
                  description: "Condition contains details for one aspect of the current
                    state of this API Resource.\n---\nThis struct is intended for
                    direct use as an array at the field path .status.conditions.  For
                    example,\n\n\n\ttype FooStatus struct{\n\t    // Represents the
                    observations of a foo's current state.\n\t    // Known .status.conditions.type
                    are: \"Available\", \"Progressing\", and \"Degraded\"\n\t    //
                    +patchMergeKey=type\n\t    // +patchStrategy=merge\n\t    // +listType=map\n\t
                    \   // +listMapKey=type\n\t    Conditions []metav1.Condition `json:\"conditions,omitempty\"
                    patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"`\n\n\n\t
                    \   // other fields\n\t}"
                  properties:
                    lastTransitionTime:
                      description: |-
                        lastTransitionTime is the last time the condition transitioned from one status to another.
                        This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: |-
                        message is a human readable message indicating details about the transition.
                        This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: |-
                        observedGeneration represents the .metadata.generation that the condition was set based upon.
                        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
                        with respect to the current state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: |-
                        reason contains a programmatic identifier indicating the reason for the condition's last transition.
                        Producers of specific condition types may define expected values and meanings for this field,
                        and whether the values are considered a guaranteed API.
                        The value should be a CamelCase string.
                        This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: |-
                        type of condition in CamelCase or in foo.example.com/CamelCase.
                        ---
                        Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be
                        useful (see .node.status.conditions), the ability to deconflict is important.
                        The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
